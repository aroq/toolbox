#!/usr/bin/env variant
# vi: ft=yaml

description: Toolbox management tasks

bindParamsFromEnv: true

parameters:
- name: TOOLBOX_DIR
  default: "toolbox"
- name: TOOLBOX_TMP_DIR
  default: ".tmp"
- name: TOOLBOX_SETTINGS_FILE_NAME
  default: toolbox.settings.yaml
- name: TOOLBOX_BIN_DIR
  default: toolbox/bin
- name: TOOLBOX_TEMPLATE_RUN
  default: /toolbox/templates/bin/run.tpl
- name: TOOLBOX_SETTINGS_SOURCE_FILE
  default: toolbox.settings.yaml

tasks:
  core:
    import: /toolbox/variant-lib/utils.yaml

  deps:
    bindParamsFromEnv: true
    parameters:
    - name: TOOLBOX_DEPS_DIR
      default: toolbox/deps
    - name: TOOLBOX_DEPS_FILE
      default: toolbox.deps.yaml
    tasks:
      install:
        steps:
        - task: core.exec
          arguments:
            title: Install deps
            cmd: |
              rm -fR {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_DEPS_DIR }}

              mkdir -p ~/.ssh && echo "Host *" > ~/.ssh/config && echo " StrictHostKeyChecking no" >> ~/.ssh/config

              # Retrieve deps
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_DEPS_FILE }} -j | jq -r '.deps | to_entries | . [] | @text "\(.value) {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_DEPS_DIR }}/\(.key)"' | xargs -n2 go-getter;

              # Update revisions
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_DEPS_FILE }} -j | \
              jq -r '.deps | to_entries | . [] | @text "{{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_DEPS_DIR }}/\(.key)"' | \
              xargs -I "%" \
                sh -c "cd %; [ -d .git ] && (git rev-parse --short HEAD > REVISION; rm -fR .git)" || true;

              # Replace old deps
              rm -fR {{ .TOOLBOX_DEPS_DIR }}
              cp -fR {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_DEPS_DIR }} {{ .TOOLBOX_DEPS_DIR }}
              rm -fR {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}

      list:
        steps:
        - task: core.exec
          arguments:
            cmd: |
              # List tools
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_DEPS_FILE }} -j | jq -r '.deps';

  process:
    tasks:
      cmd:
        tasks:
          create:
            steps:
            - task: config.process.dir
              arguments:
                TOOLBOX_CONFIG_SOURCE_DIR: toolbox/config/source
                TOOLBOX_CONFIG_RENDERED_DIR: toolbox/config/rendered
            - task: cmd.create
              arguments:
                TOOLBOX_SETTINGS_FILE_NAME: config/rendered/toolbox.settings.yaml

  cmd:
    tasks:
      create:
        steps:
        - task: core.exec
          arguments:
            cmd: |
              # Remove and recreate bin dir
              rm -fR {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_BIN_DIR }};
              mkdir -p {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_BIN_DIR }};

              # Create bin dirs hierarchy
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | \
                jq -r '.tools | to_entries | .[] | select(.key | contains("/")) | .key | capture("(?<dir>.*)\/.*") | .dir' | \
                xargs -I "%" \
                  sh -c "mkdir -p {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_BIN_DIR }}/%"

              # Create "bin/*" executable wrapper-scripts
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | \
              jq -r '.tools | to_entries | .[] | @text "\(.key),\(.value.template)"' | \
              while IFS= read -r item; do
                IFS=',' read -r -a LINE <<<"$item"
                KEY="${LINE[0]}"
                if [[ "${LINE[1]}" == "null" ]]; then
                  TEMPLATE="{{ .TOOLBOX_TEMPLATE_RUN }}"
                else
                  TEMPLATE="${LINE[1]}"
                fi

                yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | jq --arg key "${KEY}" '.tools | .[$key]' |
                TASK="name: ${KEY}" \
                gomplate -f "${TEMPLATE}" \
                  -o {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_BIN_DIR }}/${KEY} \
                  --context task=stdin:///foo.yml \
                  -d 'task_name=env:///TASK?type=application/yaml'; \
                chmod a+x {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_BIN_DIR }}/${KEY};
              done

              # Replace old bin dir entries
              rm -fR {{ .TOOLBOX_BIN_DIR }}
              cp -fR {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}/{{ .TOOLBOX_BIN_DIR }} {{ .TOOLBOX_BIN_DIR }}
              rm -fR {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_TMP_DIR }}

      list:
        steps:
        - task: core.exec
          arguments:
            cmd: |
              # List "bin/*" tool executable scripts
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | \
                jq -r '.tools'

      show:
        parameters:
        - name: tool_name
          type: string
        steps:
        - task: core.exec
          arguments:
            cmd: |
              # Show command definition
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | \
                jq -r '.tools.{{ .tool_name }}'

  config:
    tasks:
      process:
        tasks:
          file:
            parameters:
            - name: TOOLBOX_CONFIG_FILE
            - name: TOOLBOX_CONFIG_PROCESSED_FILE
            steps:
            - task: core.exec
              arguments:
                cmd: |
                  # Process config file
                  uniconf -c {{ .TOOLBOX_CONFIG_FILE }} > {{ .TOOLBOX_CONFIG_PROCESSED_FILE }} 2> /dev/null;
            tasks:
              path:
                parameters:
                - name: dir
                  type: string
                - name: file
                  type: string
                - name: path
                  type: string
                steps:
                - task: core.exec
                  arguments:
                    cmd: |
                      mkdir -p {{ .dir }}
                      yq r {{ .TOOLBOX_CONFIG_DEFINES_PROCESSED_FILE_PATH }} {{ .path }} > {{ .dir }}/{{ .file }}

          dir:
            parameters:
            - name: TOOLBOX_CONFIG_SOURCE_DIR
            - name: TOOLBOX_CONFIG_RENDERED_DIR
            steps:
            - task: core.exec
              arguments:
                cmd: |
                  # Process config
                  rm -fR {{ .TOOLBOX_CONFIG_RENDERED_DIR }}
                  mkdir -p {{ .TOOLBOX_CONFIG_RENDERED_DIR }}
                  fd -0 "^*.y.?ml" {{ .TOOLBOX_CONFIG_SOURCE_DIR }} -x sh -c "uniconf -c {{ .TOOLBOX_CONFIG_SOURCE_DIR }}/{/} > {{ .TOOLBOX_CONFIG_RENDERED_DIR }}/{/} 2> /dev/null";

      render:
        parameters:
        - name: TOOLBOX_CONFIG_TEMPLATES_DIR
        steps:
        - task: core.exec
          arguments:
            cmd: |
              gomplate -d defines={{ .TOOLBOX_CONFIG_FILE }} \
              --input-dir={{ .TOOLBOX_CONFIG_TEMPLATES_DIR }} \
              --output-dir={{ .TOOLBOX_CONFIG_RENDERED_DIR }}
        tasks:
          stdin:
            parameters:
            - name: json_path
              type: string
            steps:
            - task: core.exec
              arguments:
                cmd: |
                  yq r {{ .TOOLBOX_CONFIG_FILE }} -j | \
                  jq -r '{{ .json_path }}' | \
                  gomplate -d defines=stdin:///foo.yaml \
                    --input-dir={{ .TOOLBOX_CONFIG_TEMPLATES_DIR }} \
                    --output-dir={{ .TOOLBOX_CONFIG_RENDERED_DIR }}

  init:
    parameters:
    - name: TOOLBOX_DEPS_DIR
      default: toolbox/.toolbox/deps
    - name: TOOLBOX_BOILERPLATE_ADDRESS
      default: github.com/aroq/toolbox-boilerplate?ref=v0.1.8
    steps:
    - task: core.exec
      arguments:
        title: Toolbox initialize
        cmd: |
          # rm -fR toolbox/.toolbox/deps

          go-getter {{ .TOOLBOX_BOILERPLATE_ADDRESS }} "{{ .TOOLBOX_DEPS_DIR }}/toolbox-boilerplate"
          rm -fR "{{ .TOOLBOX_DEPS_DIR }}/toolbox-boilerplate/.git"

          rsync -r --exclude=".git" --exclude="CHANGES" --exclude="LICENSE" --exclude="VERSION" --ignore-existing "{{ .TOOLBOX_DEPS_DIR }}/toolbox-boilerplate/." toolbox/
          rm -fR "{{ .TOOLBOX_DEPS_DIR }}/toolbox-boilerplate"

          if [ ! -f Makefile ]; then
            echo 'include toolbox/Makefile' > Makefile
          else
            echo 'include toolbox/Makefile' | cat - Makefile > temp && mv temp Makefile
          fi

    - task: cmd.create
    - task: deps.install
