#!/usr/bin/env variant
# vi: ft=yaml
#
import: toolbox/.toolbox/deps/toolbox/variant-lib/utils.yaml

description: Toolbox management tasks

parameters:
- name: TOOLBOX_DIR
  default: toolbox/.toolbox
- name: TOOLBOX_PROJECT_DIR
  default: toolbox
# - name: TOOLBOX_TOOLS_DIR
  # default: toolbox/.toolbox/tools
- name: TOOLBOX_SETTINGS_FILE_NAME
  default: toolbox.settings.yaml
- name: TOOLBOX_EXECUTABLES_DIR
  default: toolbox/bin

tasks:
  tools:
    tasks:
      install:
        steps:
        - task: exec
          arguments:
            title: Install tools
            cmd: |
              set -e
              # Remove & recreate toolbox dir
              rm -fR {{ .TOOLBOX_TOOLS_DIR }};
              mkdir -p {{ .TOOLBOX_TOOLS_DIR }};

              # Process config
              uniconf -c {{ .TOOLBOX_PROJECT_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} 2> /dev/null > {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }};

              # Retrieve libraries
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | jq -r '.tools | to_entries | unique_by(.value.destination) | .[] | select(.value.source != null) | @text "\(.value.source) \(.value.prefix)/\(.value.tools_dir)/\(.value.destination)"' | xargs -n2 go-getter;

              # Mark git revision of the tool and remove ".git" dir to be able to add tools into root git repo
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | jq -r '.tools | to_entries | unique_by(.value.destination) | .[] | select(.value.source != null) | @text "\(.value.prefix)/\(.value.tools_dir)/\(.value.destination)"' | \
                xargs -I "%" \
                  sh -c "cd %; [ -d .git ] && (git rev-parse --short HEAD > REVISION; rm -fR .git)" || true;

              # Remove tmp dir
              rm -fR .unipipe_temp;

      list:
        steps:
        - task: exec
          arguments:
            cmd: |
              # List tools
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | jq -r '.tools | to_entries | unique_by(.value.destination)| .[] | select(.value.source != null) | @text "\(.value.source) \(.value.prefix)/\(.value.tools_dir)/\(.value.destination)"';

  deps:
    tasks:
      install:
        steps:
        - task: exec
          arguments:
            title: Install deps
            cmd: |
              # set -e
              
              rm -fR toolbox/.toolbox/tmp/deps

              # Process config
              uniconf -c {{ .TOOLBOX_PROJECT_DIR }}/config/source/{{ .TOOLBOX_SETTINGS_FILE_NAME }} 2> /dev/null > {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }};

              mkdir -p ~/.ssh && echo "Host *" > ~/.ssh/config && echo " StrictHostKeyChecking no" >> ~/.ssh/config

              # Retrieve deps
              yq r {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | jq -r '.deps | to_entries | . [] | @text "\(.value) toolbox/.toolbox/tmp/deps/\(.key)"' | xargs -n2 go-getter;

              # Update revisions
              yq r {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | \
              jq -r '.deps | to_entries | . [] | @text "toolbox/.toolbox/tmp/deps/\(.key)"' | \
              xargs -I "%" \
                sh -c "cd %; [ -d .git ] && (git rev-parse --short HEAD > REVISION; rm -fR .git)" || true;

              rm -fR toolbox/.toolbox/deps
              cp -fR toolbox/.toolbox/tmp/deps toolbox/.toolbox

      list:
        steps:
        - task: exec
          arguments:
            cmd: |
              uniconf -c {{ .TOOLBOX_PROJECT_DIR }}/config/source/{{ .TOOLBOX_SETTINGS_FILE_NAME }} 2> /dev/null > {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }};

              cat {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }}
              # List tools
              yq r {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | jq -r '.deps';

  cmd:
    tasks:
      create:
        steps:
        - task: exec
          arguments:
            cmd: |
              # Process config
              mkdir -p {{ .TOOLBOX_PROJECT_DIR }}/config/rendered;
              uniconf -c {{ .TOOLBOX_PROJECT_DIR }}/config/source/{{ .TOOLBOX_SETTINGS_FILE_NAME }} 2> /dev/null > {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }};

              # Remove and recreate bin dir
              rm -fR {{ .TOOLBOX_EXECUTABLES_DIR }};
              mkdir -p {{ .TOOLBOX_EXECUTABLES_DIR }};

              yq r {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | \
                jq -r '.tools | to_entries | .[] | select(.key | contains("/")) | .key | capture("(?<dir>.*)\/.*") | .dir' | \
                xargs -I "%" \
                  sh -c "mkdir -p {{ .TOOLBOX_EXECUTABLES_DIR }}/%"

              # Create "bin/*" tool executable scripts
              yq r {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | \
                jq -r '.tools | to_entries | .[] | .key' | \
                xargs -I "%" \
                  sh -c "yq r {{ .TOOLBOX_PROJECT_DIR }}/config/rendered/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | jq '.tools | .[\"%\"]' | gomplate -f {{ .TOOLBOX_DIR }}/deps/toolbox/templates/bin/run.tpl -o {{ .TOOLBOX_EXECUTABLES_DIR }}/% --context task=stdin:///foo.yml; chmod a+x {{ .TOOLBOX_EXECUTABLES_DIR }}/%";

              # Remove tmp dir
              rm -fR .unipipe_temp;

      list:
        steps:
        - task: exec
          arguments:
            cmd: |
              # List "bin/*" tool executable scripts
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | \
                jq -r '.tools'

      show:
        parameters:
        - name: tool_name
          type: string
        steps:
        - task: exec
          arguments:
            cmd: |
              # Show command definition
              yq r {{ .TOOLBOX_DIR }}/{{ .TOOLBOX_SETTINGS_FILE_NAME }} -j | \
                jq -r '.tools.{{ .tool_name }}'

